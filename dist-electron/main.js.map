{"version":3,"file":"main.js","sources":["../src/main/main.ts"],"sourcesContent":["const {\n  app,\n  BrowserWindow,\n  systemPreferences,\n  ipcMain,\n  dialog,\n} = require(\"electron\");\nconst path = require(\"path\");\nconst isDev = require(\"electron-is-dev\");\nconst { SystemAudioCapture } = require(\"bindings\")(\"systemAudio\");\n\nlet audioCapture: any = null;\n\nfunction createWindow() {\n  const mainWindow = new BrowserWindow({\n    width: 800,\n    height: 600,\n    webPreferences: {\n      nodeIntegration: false,\n      contextIsolation: true,\n      preload: path.join(__dirname, \"preload/index.js\"),\n    },\n  });\n\n  // Load the app\n  if (isDev) {\n    mainWindow.loadURL(\"http://localhost:5173\");\n  } else {\n    mainWindow.loadFile(path.join(__dirname, \"../../dist/index.html\"));\n  }\n\n  // Request permissions when needed\n  const requestPermissions = async () => {\n    try {\n      // Request screen capture permission\n      const screenCaptureStatus = await systemPreferences.getMediaAccessStatus(\n        \"screen\"\n      );\n      if (screenCaptureStatus !== \"granted\") {\n        const result = await dialog.showMessageBox({\n          type: \"warning\",\n          buttons: [\"Open System Preferences\", \"Cancel\"],\n          defaultId: 0,\n          message: \"Screen Recording Permission Required\",\n          detail:\n            \"This app needs screen recording permission to capture system audio. Please enable it in System Preferences > Security & Privacy > Privacy > Screen Recording.\",\n        });\n\n        if (result.response === 0) {\n          await systemPreferences.askForMediaAccess(\"screen\");\n        } else {\n          throw new Error(\"Screen recording permission denied\");\n        }\n      }\n\n      // Request microphone permission (needed for some audio capture scenarios)\n      const micStatus = await systemPreferences.getMediaAccessStatus(\n        \"microphone\"\n      );\n      if (micStatus !== \"granted\") {\n        await systemPreferences.askForMediaAccess(\"microphone\");\n      }\n    } catch (error) {\n      console.error(\"Error requesting permissions:\", error);\n      throw error;\n    }\n  };\n\n  // Initialize audio capture\n  const initAudioCapture = () => {\n    try {\n      if (!audioCapture) {\n        audioCapture = new SystemAudioCapture();\n        console.log(\"Native module loaded successfully\");\n      }\n    } catch (error) {\n      console.error(\"Failed to load native module:\", error);\n      throw error;\n    }\n  };\n\n  // Handle IPC messages\n  ipcMain.handle(\"start-audio-capture\", async (event, options = {}) => {\n    try {\n      await requestPermissions();\n      initAudioCapture();\n\n      audioCapture.startCapture((buffer: Buffer, format: any) => {\n        // Send the audio data to the renderer process\n        if (!mainWindow.isDestroyed()) {\n          mainWindow.webContents.send(\"audio-data\", buffer, format);\n        }\n      });\n    } catch (error) {\n      console.error(\"Error starting audio capture:\", error);\n      throw error;\n    }\n  });\n\n  ipcMain.handle(\"stop-audio-capture\", () => {\n    try {\n      if (audioCapture) {\n        audioCapture.stopCapture();\n        audioCapture = null;\n      }\n    } catch (error) {\n      console.error(\"Error stopping audio capture:\", error);\n      throw error;\n    }\n  });\n}\n\napp.whenReady().then(() => {\n  createWindow();\n\n  app.on(\"activate\", () => {\n    if (BrowserWindow.getAllWindows().length === 0) {\n      createWindow();\n    }\n  });\n});\n\napp.on(\"window-all-closed\", () => {\n  if (process.platform !== \"darwin\") {\n    app.quit();\n  }\n});\n"],"names":[],"mappings":";AAAA,MAAM;AAAA,EACJ;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,IAAI,QAAQ,UAAU;AACtB,MAAM,OAAO,QAAQ,MAAM;AAC3B,MAAM,QAAQ,QAAQ,iBAAiB;AACvC,MAAM,EAAE,mBAAmB,IAAI,QAAQ,UAAU,EAAE,aAAa;AAEhE,IAAI,eAAoB;AAExB,SAAS,eAAe;AAChB,QAAA,aAAa,IAAI,cAAc;AAAA,IACnC,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,gBAAgB;AAAA,MACd,iBAAiB;AAAA,MACjB,kBAAkB;AAAA,MAClB,SAAS,KAAK,KAAK,WAAW,kBAAkB;AAAA,IAAA;AAAA,EAClD,CACD;AAGD,MAAI,OAAO;AACT,eAAW,QAAQ,uBAAuB;AAAA,EAAA,OACrC;AACL,eAAW,SAAS,KAAK,KAAK,WAAW,uBAAuB,CAAC;AAAA,EAAA;AAInE,QAAM,qBAAqB,YAAY;AACjC,QAAA;AAEI,YAAA,sBAAsB,MAAM,kBAAkB;AAAA,QAClD;AAAA,MACF;AACA,UAAI,wBAAwB,WAAW;AAC/B,cAAA,SAAS,MAAM,OAAO,eAAe;AAAA,UACzC,MAAM;AAAA,UACN,SAAS,CAAC,2BAA2B,QAAQ;AAAA,UAC7C,WAAW;AAAA,UACX,SAAS;AAAA,UACT,QACE;AAAA,QAAA,CACH;AAEG,YAAA,OAAO,aAAa,GAAG;AACnB,gBAAA,kBAAkB,kBAAkB,QAAQ;AAAA,QAAA,OAC7C;AACC,gBAAA,IAAI,MAAM,oCAAoC;AAAA,QAAA;AAAA,MACtD;AAII,YAAA,YAAY,MAAM,kBAAkB;AAAA,QACxC;AAAA,MACF;AACA,UAAI,cAAc,WAAW;AACrB,cAAA,kBAAkB,kBAAkB,YAAY;AAAA,MAAA;AAAA,aAEjD,OAAO;AACN,cAAA,MAAM,iCAAiC,KAAK;AAC9C,YAAA;AAAA,IAAA;AAAA,EAEV;AAGA,QAAM,mBAAmB,MAAM;AACzB,QAAA;AACF,UAAI,CAAC,cAAc;AACjB,uBAAe,IAAI,mBAAmB;AACtC,gBAAQ,IAAI,mCAAmC;AAAA,MAAA;AAAA,aAE1C,OAAO;AACN,cAAA,MAAM,iCAAiC,KAAK;AAC9C,YAAA;AAAA,IAAA;AAAA,EAEV;AAGA,UAAQ,OAAO,uBAAuB,OAAO,OAAO,UAAU,CAAA,MAAO;AAC/D,QAAA;AACF,YAAM,mBAAmB;AACR,uBAAA;AAEJ,mBAAA,aAAa,CAAC,QAAgB,WAAgB;AAErD,YAAA,CAAC,WAAW,eAAe;AAC7B,qBAAW,YAAY,KAAK,cAAc,QAAQ,MAAM;AAAA,QAAA;AAAA,MAC1D,CACD;AAAA,aACM,OAAO;AACN,cAAA,MAAM,iCAAiC,KAAK;AAC9C,YAAA;AAAA,IAAA;AAAA,EACR,CACD;AAEO,UAAA,OAAO,sBAAsB,MAAM;AACrC,QAAA;AACF,UAAI,cAAc;AAChB,qBAAa,YAAY;AACV,uBAAA;AAAA,MAAA;AAAA,aAEV,OAAO;AACN,cAAA,MAAM,iCAAiC,KAAK;AAC9C,YAAA;AAAA,IAAA;AAAA,EACR,CACD;AACH;AAEA,IAAI,UAAA,EAAY,KAAK,MAAM;AACZ,eAAA;AAET,MAAA,GAAG,YAAY,MAAM;AACvB,QAAI,cAAc,gBAAgB,WAAW,GAAG;AACjC,mBAAA;AAAA,IAAA;AAAA,EACf,CACD;AACH,CAAC;AAED,IAAI,GAAG,qBAAqB,MAAM;AAC5B,MAAA,QAAQ,aAAa,UAAU;AACjC,QAAI,KAAK;AAAA,EAAA;AAEb,CAAC;"}